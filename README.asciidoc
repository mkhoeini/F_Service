= Factorization Service

Suppose that you need to write a service which has to respond to many concurrent requests, which each request needs some non-trivial computation for responding. And you need high scalability.

This repo enables you to make a comparison between different platforms and benchmark them.


== The problem

The service needs to be able to listen to concurrent connections. On each connection it will receive HTTP POST requests with a `number` parameter.

Then it has to respond to the request with e JSON of all of the `number`'s factorizations.

For example, 4 has these factorizations: [1, 4], [2, 2]

However, the resond object is somewhat more complicated than that.

For example for 8 it is like this:

[code,javascript]
----
[
  [
    {
      prime: true,
      number: 1
    },
    {
      prime: false,
      number: 8
    }
  ],
  [
    {
      prime: true,
      number: 2
    },
    {
      prime: false,
      number: 4,
      factors: [
                 [
                  [
                    {
                      prime: true,
                      number: 1
                    },
                    {
                      prime: false,
                      number: 4
                    }
                  ],
                  [
                    {
                      prime: true,
                      number: 2
                    },
                    {
                      prime: true,
                      number: 2
                    }
                  ]
                 ]
               ]
    }
  ]
]
----

As you can see, it has some peculiarities. First, it considers 1 as a prime number. Second, it recursively factors out other non-prime numbers.

The program needs to implement 3 different verieties. One which directly computes the respond for each request, without any caching or database. One with uses an in memory cache. And one which queries a database.

Then we benchmark each of these variants against different number of concurrent connections.

I beleive that these constrains bring a good balance between simplicity and being easy to implement in one hand and needing to do some non-trivial job on the other hand.
